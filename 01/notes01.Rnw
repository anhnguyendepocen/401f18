%\documentclass[handout]{beamer}
\documentclass{beamer}

\input{../header.tex}
\newcommand\CHAPTER{1}
%\newcommand\answer[2]{#2} % to show answers
 \newcommand\answer[2]{#1} % to show blank space
<<R_answer,echo=F,purl=F>>=
# ANS = TRUE
ANS=FALSE
@

\begin{document}

% knitr set up
<<knitr_opts,echo=F,purl=F>>=
library(knitr)
opts_chunk$set(
#  cache=FALSE,
  cache=TRUE,
  eval=TRUE,
  include=TRUE,
  echo=TRUE,
  purl=TRUE,
  cache.path=paste0("tmp/cache"),
  dev='png',
  dev.args=list(bg='transparent'),
  dpi=300,
  error=FALSE, 
  fig.pos="h!",
  fig.align='center',
  fig.height=4,fig.width=6.83,
  fig.lp="fig:",
  fig.path=paste0("tmp/figure"),
  fig.show='asis',
  highlight=TRUE,
  message=FALSE,
  progress=TRUE,
  prompt=FALSE,
#  results='asis',
  results="markup",
  size='small',
  strip.white=TRUE,
  tidy=FALSE,
  warning=FALSE
#  comment=NA # to remove ## on output
)

options(width = 60) # number of characters in R output before wrapping
@

<<plot_margins,echo=F>>=
par(mai=c(1,0.5,0,0))
@

\begin{frame}
\frametitle{STATS 401. Applied Statistical Methods II
\\
\vspace{3mm}
Chapter \CHAPTER. Getting started}

\vspace{-5mm}

\begin{center} \Large\bf
Welcome!
\end{center}

\vspace{-2mm}

{\bf Objectives}: Linear statistical models are the foundation for most of applied statistics. We will develop statistical computation skills (R programming) and mathematical skills (working with matrices and probabilities) while studying data analysis using linear models.

\vspace{3mm}

{\bf Course information}: The syllabus on the course website
\url{ionides.github.io/401f18} 
has a course outline, comments on pre-requisites, exam times, and other relevant information.

\end{frame}

\begin{frame}
\frametitle{An outline of a data analysis}

\begin{myitemize}
\item
A typical data analysis has the following steps:
 \begin{enumerate}
 \item Obtain data and read it into R
 \item Plot the data
 \item Develop a model
 \item Estimate parameters and test hypotheses of interest
 \item Interpret the results
 \end{enumerate}
\item All these steps involve statistical computing, either doing it or interpreting results from it.
\item The two rising stars in statistical computing are R and Python (\url{http://r4stats.com/articles/popularity/}). Generally, R is preferred for data analysis, and Python for larger programming projects.
\end{myitemize}
  \begin{center}
  \large \myemph{We live in an era of abundant data. Learn R!}
  \end{center}

\end{frame}

\begin{frame}[fragile]
\frametitle{Getting started with R}

\begin{myitemize} 
\item Some statistical software packages operate by selecting menu options. 
\item For example, this is the basic way of using R Commander.
\end{myitemize}
\myquestion.
Why should we prefer to use the command line form of R rather than point-and-click menu options?

\answer{\vspace{15mm}}{(i) reproducibility; (ii) code sharing; (iii) scales to more complex statistical analysis; (iv) faster once learned.}

\begin{myitemize}
\item Homework 0 involves installing R and RStudio on your laptop.
\item The R package \code{swirl} teaches R in R. See Homework~1.
\item R code is given in the notes. 
\item The course website also has links for the R code extracted from the notes. For example,
\url{ionides.github.io/401f18/01/notes01.R}
\item Typing commands and seeing what happens is a good way to learn R.
\end{myitemize}
\end{frame}

\begin{frame}[fragile] 
\frametitle{Case study: Are people healthier in booms or busts?}

\vspace{-1mm}

\begin{myitemize}
\item Is population health \myemph{pro-cyclical} (improving in business cycle booms) or \myemph{counter-cyclical} (improving in recessions), or neither? 
\item We will analyze data on annual death rates to investigate this.
\item \myemph{Life expectancy at birth} combines instantaneous death rates at all ages and is a basic measure of current population health.
\item Life expectancy in 2017 is the average lifespan of a fictitious person whose probability of dying at age 10 matches mortality of 10-year-olds in 2017, and the probability at age 50 matches 50-year-olds in 2017. (\url{data.oecd.org/healthstat/life-expectancy-at-birth.htm}). 
\item USA data for 1933--2015 are in the file \url{life_expectancy.txt} on the class website.
\item We could read the data into R directly from a website, but it is good data analysis practice to make your own local copy. Here is a way to do that in R:
<<read_life_expectancy>>=
download.file(destfile="life_expectancy.txt",
  url="https://ionides.github.io/401f18/01/life_expectancy.txt")
@
\end{myitemize}

\end{frame}

\begin{frame}[fragile]
\frametitle{Inspecting the raw data file}

\begin{myitemize}
\item The raw data can be viewed as a plain text file.

\end{myitemize} 

\myquestion. We work with data in a plain text format. Spreadsheets can be saved to \code{.txt} or \code{.csv} format. Why is this good data analysis practice?

\answer{\vspace{15mm}}{(i) transparency: Excel hides things; (ii) simplicity: plain text files are simple and portable.}

\begin{myitemize}

\item The first lines of the life expectancy data file are:
\end{myitemize}

\vspace{-4mm}

\begin{verbatim}
# The United States of America, Life expectancy at birth.
# Downloaded from Human Mortality Database on 30 Oct 2017.
# HMD request that you register at http://www.mortality.org 
# if you use these data for research purposes.
  Year       Female    Male     Total
  1933        62.78    59.17    60.88
  1934        62.34    58.34    60.23
\end{verbatim}

\vspace{-3mm}

\begin{myitemize}
\item 
Lines marked with \url{#} are \myemph{comments} that are ignored by R.
\end{myitemize}

\end{frame}

\begin{frame}[fragile]
\frametitle{Read the data into R and then inspect it}

<<read_e0>>=
L <- read.table(file="life_expectancy.txt",header=TRUE)
@

\vspace{-2mm}

\begin{myitemize}
\item The \myemph{function} \code{read.table()} reads data from a file to make a \myemph{data matrix} in R.
\item The \myemph{assignment operator} \code{<-} gives this matrix the name \url{L}. 
\item The \myemph{argument} \code{file="life_expectancy.txt"} names the file.
\item \code{header=TRUE} tells R to treat the first row as column names.
\item Let's look at the first three rows of \url{L} using the function \code{head()}.
\end{myitemize}
<<LE_head>>=
head(L,3)
@
\begin{myitemize}
\item Check this matches the data file. Reading data correctly can be fiddly.
\end{myitemize}

\end{frame}

\begin{frame}[fragile]
\frametitle{A comment on the assignment operator}

\begin{myitemize}
\item We read the \myemph{assignment operator} \code{<-} as ``gets''. 
\item The assignment above is read as ``\code{L} gets the data in \code{life_expectancy.txt}''.
\item We could equivalently have used \code{=} 
<<alt_read_e0,eval=FALSE>>= 
L = read.table(file="life_expectancy.txt",header=TRUE)
@
\item You will see both \code{<-} and \code{=} used for assignment.
\end{myitemize}
\myquestion. \code{<-} is slightly better coding practice than \code{=}. Why?

\answer{\vspace{20mm}}{(i) assignment is not symmetric so we can also do right assignment, \code{->}. (ii) \code{=} is used for labeling function arguments.}

\end{frame}

\begin{frame}[fragile]
\frametitle{Using matrix indexing to identify entries in the dataset}

\vspace{-1mm}

\begin{myitemize}
\item Each entry in a data matrix can be identified by its row and column index.
\item We can use \myemph{matrix indexing} to read and manipulate entries of \code{L}.
<<LE_indexing>>=
L[2,3]
@

\vspace{-1mm}

\item \code{L[i,j]} is the row \code{i} column \code{j} entry of \code{L}. 
\item Most datasets have this matrix form, also called  \myemph{rectangular} data.
\item Each row is a measured object (a person, a car, an experiment, a country) generically called a \myemph{unit}.
\item The columns lists \myemph{variables} measured for each unit.
\end{myitemize}

\myquestion. For the life expectancy data, what are the units? What are the variables?

\answer{\vspace{15mm}}{Units are years, variables are three life expectancy categories: female, male and total}

\end{frame}
\begin{frame}[fragile]
\frametitle{Selecting rows or columns of a matrix}
\begin{myitemize}
\item Above, we used the function \code{head()} to see the first 3 rows of \code{L}.
\item We could have used matrix indexing.
\end{myitemize}
<<LE_rows>>=
L[1:3,]
@
\begin{myitemize}
\item \code{1:3} is the sequence \code{1,2,3}.
\item The blank space after the comma in \code{L[1:3,]} requests all the columns for the specified rows.
\end{myitemize}

\end{frame}

\begin{frame}[fragile]
\frametitle{Vectors in R}

\begin{myitemize}
\item A \myemph{numeric vector} in R is a sequence of numbers. 
\item One way to make a vector is to use the \myemph{concatenation function}, \code{c()}.
<<vecExample>>=
v <- c(3,1,4,1,5,9)
v
@
\item \code{c(1,2,3,4,5,6)} can be written as \code{1:6}
\item Elements of a vector can be extracted using \code{[]}.
<<extraction>>=
v[3]
@
\end{myitemize}
\myquestion. What do you think is the value of \code{v[c(2,6)]} and \code{v[3:5]}? 

\answer{\vspace{20mm}}{(i) A vector with entries \code{1,9}; (ii) a vector with entries \code{4,1,5}. Try typing this to see what happens.}


\end{frame} 


\begin{frame}[fragile]
\frametitle{Matrices and their dimensions}

%\vspace{1mm}
\begin{myitemize}
\item Mathematically, we write \altdisplaymath{
\mat{L}
%=[\ell_{ij}]
=\left[
\begin{array}{cccc}
\ell_{11} & \ell_{12} & \dots & \ell_{1p} \\
\ell_{21}& \ell_{22} & \dots & \ell_{2p} \\
\vdots & \vdots & \ddots & \vdots \\
\ell_{n1} & \ell_{n2} & \dots & \ell_{np} 
\end{array}
\right]
}.

\item We say \mymath{\mat{L}} is a matrix with \myemph{dimension} \mymath{n\times p}. 
\item It is common to use \mymath{n} for the number of rows, corresponding to the number of measured units. 
\item We will see that \mymath{p} is common notation for the number of variables.
\item To get the dimension in R, we use the \code{dim()} function.
<<dim>>=
dim(L)
@
\item We say that \code{L} is a matrix with \code{n=\Sexpr{nrow(L)}} rows and \code{p=\Sexpr{ncol(L)}} columns.
\end{myitemize}
\vspace{-2.5mm}
\end{frame} 

\begin{frame}[fragile]
\frametitle{Extracting rows and columns from a matrix}

\vspace{-1.5mm}

\begin{myitemize}
\item 
In R, a single row or column of a matrix is a vector.  
\item
For example, we can extract the first 5 entries for total life expectancy, which is the fourth column of \code{L}, as follows.
<<vec>>=
L[1:5,4]
@
\item We can also use row and column names:
<<vec_with_names>>=
L[1:5,"Total"]
@
\item We need \code{""} so that R knows \code{Total} is text not a variable name. 

\vspace{1mm}

\myquestion. What is going on in this peculiar example?
<<vec_with_names_weird>>=
Total <- "Female"
L[1:5,Total]
@

\answer{\vspace{15mm}}{This is equivalent to \code{L[1:5,"Female"]}}

\end{myitemize}

\end{frame}

\begin{frame}[fragile] 
\frametitle{Vectors in R are not matrices} 

\begin{myitemize}
\item A vector in R has a \code{length} but not a \code{dim}.
\item We have already found the dimension of the data matrix \code{L},
<<length_or_dimA>>=
dim(L)
@
\item Let's set \code{y} to be the fourth column of the data and see its dimension:
<<length_or_dimB>>=
y <- L[,4]
dim(y)
@
\item However, \code{y} does have a \code{length}, equal to the number of rows:
<<length_or_dimC>>=
length(y)
@
%\item A column of the \mymath{n\times p} matrix \mymath{\mat{L}} is sometimes considered as a \mymath{n\times 1} matrix called a \myemph{column vector}. A row of \mymath{\mat{L}} can be viewed as a \mymath{1\times p} matrix called a \myemph{row vector}. It is sometimes important to note that R \myemph{drops} matrices with dimension of length 1 to give a vector.
\end{myitemize}

\end{frame}
\begin{frame}[fragile]
\frametitle{Addition and multiplication of vectors in R}
\begin{myitemize}
\item Let's see what happens when we add two vectors:
<<vec_add>>=
u <- c(3,1,4)
v <- c(1,5,9)
u+v
@
\item Vectors are added \myemph{elementwise}.
\item They also multiply elementwise:
<<vec_mult>>=
u*v
@
\item In R, many functions apply elementwise. This is useful for data analysis: we often want to do the same operation to each data point. 
\end{myitemize}
\end{frame}
\begin{frame}[fragile]
\frametitle{Addition and multiplication of a vector with a scalar}
\begin{myitemize}
\item A single number is called a \myemph{scalar} or a \myemph{constant}.
\item Let's see what happens when we add and muliply with a scalar.
<<vec_scalar_add>>=
u <- c(3,1,4)
a <- 5
u+a
@
\item The constant is added to each element of the vector.
\item The same rule applies for multiplying a vector and a scalar:
<<vec_scalar_mult>>=
u*a
@
\item The rules in R aim to be convenient for data analysis. This is often the case, but we still have to learn what R does and check it is doing what we want.
\end{myitemize}

\end{frame}
\begin{frame}[fragile]
\frametitle{Calculating the increase in life expectancy}

\begin{myitemize}
\item As above, set \code{y} to be a vector of life expectancy at birth each year, for men and women combined:
<<>>=
y <- L[,"Total"]
@
\item To obtain the increase in life expectancy each year over the previous year,
<<e0_gain>>=
g <- y[2:length(y)] - y[1:(length(y)-1)] 
@
\end{myitemize}
\myquestion. Write out the expression for the elements \code{g[1]} and \code{g[2]} in terms of elements of \code{y}. This should convince you whether our calculation is correct.
\answer{\vspace{30mm}}{
The first element of \code{y[2:length(y)]} is \code{y[2]} and the first element of \code{y[1:(length(y)-1)]} is \code{y[1]}. Subtraction is elementwise, so the first element of \code{g} is \code{g[1]=y[2]-y[1]}. Similar reasoning gives \code{g[2]=y[3]-y[2]}.}

\end{frame}
\begin{frame}[fragile]
\frametitle{\code{NA} and \code{NULL} values in R}
\begin{myitemize}
\item
Increase in life expectancy is not available for the first year it is measured.
<<>>=
length(y)
length(g)
@
\item To make include this missing value and make the data vectors equal length, let's set the first increase to \code{NA}, 
<<e0_gain_with_na>>=
g <- c(NA,g) 
g[1:8]
@
\item
Now we've seen two of R's special non-numeric values. \code{NULL} means ``doesn't exist''. \code{NA} means ``not available'' or ``missing''. Data matrices can have \code{NA} entries but not \code{NULL}. R tries to treat missing data appropriately. 
\end{myitemize}
\end{frame}

\begin{frame}[fragile]
\frametitle{Logical vectors in R}

\vspace{-1.5mm}

\begin{myitemize}
\item Elements of \myemph{logical vectors} are \code{TRUE} or \code{FALSE}.
\item One way to get a logical vector in R is to test for equality or inequality using \code{>}, \code{<} or \code{==}.
\item To find years with decreasing life expectancy:
<<logic_vec>>=
g[1:6]
L_down <- g<0
L_down[1:6]
@
\item As we might expect, \code{>} is calculated elementwise.
\item We can index using a logical vector:
<<>>=
year <- L[,"Year"]
years_down <- year[L_down]
years_down[1:6]
@
\end{myitemize}

\end{frame}

\begin{frame}[fragile]
\frametitle{Character vectors in R}
\begin{myitemize}
\item Elements of \myemph{character vectors} are strings of letters and symbols.
\item Qualitative data are often represented as character strings:
<<character_vec>>=
L_qualitative <- ifelse(g<0,"decreased","increased")
L_qualitative[1:6]
@
\end{myitemize}
\myquestion. Guess how \code{ifelse()} works. Is is elementwise?

\answer{\vspace{25mm}}{Yes. For each element, if the first argument is \code{TRUE} then the second argument is evaluated, otherwise the third argument is evaluated.}

\begin{myitemize}
\item You can check the R help on \code{ifelse()} by typing
<<,eval=F,purl=F>>=
?ifelse
@
\item It takes some practice to learn to read R help effectively!
\end{myitemize}
\end{frame}

\begin{frame}[fragile]
\frametitle{Checking the class of an R object}
\begin{myitemize}
\item
The \code{class} function tells us what data type R is working with
<<>>=
class(g)
class(L_down)
class(L_qualitative)
@
\item It is often useful to look at the class of a new R object you have made, to see if it is what you think it is! 
\end{myitemize}

\end{frame}




\begin{frame}[fragile]
\frametitle{R data structures: dataframes and matrices}

\vspace{-3mm}

\begin{myitemize}

\item A matrix in R must have all entries of the same class. 
The mathematics of fitting a linear statistical model will require numeric data.

\item For example, to convert data to a numeric representation for statistical analysis, \code{L_down} or \code{L_qualitative} could be coded using \code{0} for \code{FALSE} (or \code{"increased"}) and \code{1} for \code{TRUE} (or \code{"decreased"}).

\item A dataframe in R may have different classes in each column. Data are usually stored in dataframes, e.g., \code{read.table()} generates a dataframe.  
<<>>=
class(L)
L_matrix <- as.matrix(L)
class(L_matrix)
@
\item For many purposes, dataframes and matrices behave the same.

\item R has many ways of working with data like the Innuit have many words for snow {(\url{wikipedia:Eskimo_words_for_snow})}.
\end{myitemize}
\end{frame}


\begin{frame}[fragile]
\frametitle{Getting help with R}
\begin{myitemize}
\item Learning a new computing language is frustrating.
\item Try to debug your code for a reasonable time and then start working up the resources until the problem is solved.
\item The following order is a guide:
\end{myitemize}
\begin{enumerate}
\item The R help, e.g., type \code{?ifelse} for information on the syntax of \code{ifelse}.
\item The internet, e.g., google ``R ifelse''.
\item Classmates.
\item Piazza.
\item Office hours, start-and-end of class, lab.
\item Email to instructor and/or GSI. For email help, please construct and email a simple example demonstrating the issue. 
\end{enumerate}


\end{frame}


\begin{frame}[fragile]
\frametitle{Subsetting matrices in R}

\vspace{-2mm}

\begin{myitemize}
\item
Matrices can be subsetted using logical vectors to pick out subsets of rows and columns.
\item
Each row or column is included if the logical vector is \code{TRUE} and excluded if \code{FALSE}.

\item Rows and columns can also be selected using row and column names:
<<>>=
colnames(L)
rownames(L)[1:8]
@
\end{myitemize}

\myquestion.
What is computed below. Can you find any interpretation?

<<subsetting_using_logical>>=
L[g<0,"Year"]
@

\answer{\vspace{20mm}}{1957 and 1968 had influenza pandemics. Otherwise, it may be hard to see any historical patterns.}

\end{frame}


\begin{frame}[fragile]
\frametitle{Building a matrix in R}
\begin{myitemize}
\item The basic way to build a matrix is the \code{matrix()}
function.
<<>>=
A <- matrix(1:6,nrow=2)
A
@
\item We told R to construct a matrix with elements \code{1,2,3,4,5,6}.
\item \code{matrix()} fills the matrix by columns.
\item R figured out \code{A} should have 3 columns since we gave \code{matrix()} 6 numbers and asked for 2 rows.
\item If you don't give R enough numbers, it \myemph{recycles} the ones you gave it.
<<>>=
matrix(c(1,2,3),nrow=2,ncol=3)
@

\end{myitemize}

\end{frame}

\begin{frame}[fragile]
\frametitle{Exercise on using \code{matrix()} and the recycling rule}
\myquestion. Guess the ouput of 
<<matrix_exercise,eval=F>>=
matrix(c(0,1),nrow=3,ncol=2,byrow=TRUE)
@

\answer{\vspace{25mm}}{}
<<,echo=FALSE,eval=ANS>>=
<<matrix_exercise>>
@


\begin{myitemize}
\item You can try variations on this exercise. Guess what you think R should produce, see what it does produce, and train your intuition.
\end{myitemize}

\end{frame}
\begin{frame}[fragile]
\frametitle{Gluing together vectors and matrices}
\begin{myitemize}
\item We've used \code{c()} to combine numbers into vectors. It also combines vectors into longer vectors.
<<>>=
u <- c(1,2) ; v <- c(3,4) ; c(u,v)
@
\item 
We can build a matrix by binding together vectors either as rows or columns.
<<>>=
B <- rbind(u,v) ; C <- cbind(u,v)
B
C
@
\end{myitemize}

\myquestion. Guess what \code{cbind(B,C)} and \code{rbind(B,C)} produce.

\end{frame}


\begin{frame}[fragile]
\frametitle{Unemployment data for our health economics case study}

\vspace{-1.5mm}

\begin{myitemize}
\item The \myemph{business cycle}  (\url{Wikipedia:Business_cycle}) consists of alternating periods of higher and lower economic activity.
\item Unemployment is \myemph{counter-cyclical}: it is higher when economic activity is lower.
We'll use Bureau of Labor Statistics unemployment data. 
<<download_unemployment>>=
download.file(destfile="unemployment.csv",
  url="https://ionides.github.io/401f18/01/unemployment.csv")
@

\vspace{-0.5mm}

\begin{verbatim}
# From http://data.bls.gov/timeseries/LNU04000000
# Percent unemployment, age 16+, not seasonally adjusted
Year,Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec
1948,4.0,4.7,4.5,4.0,3.4,3.9,3.9,3.6,3.4,2.9,3.3,3.6
1949,5.0,5.8,5.6,5.4,5.7,6.4,7.0,6.3,5.9,6.1,5.7,6.0
\end{verbatim}

%\vspace{0.5mm}


<<read_u>>=
U <- read.table(file="unemployment.csv",sep=",",header=TRUE)
U[1:2,]
@

% \item The data are in a comma separated variable (csv) format, so we use \code{read.table(..., sep=",",...)}.

\end{myitemize}

\end{frame}

\begin{frame}[fragile]
\frametitle{Averaging columns in R using \code{apply()}}
\begin{myitemize}
\item We want annual average unemployment. For each row, we must average columns \code{2:13}.
\item The \code{apply()} function is useful for carrying out manipulations on rows and columns of matrices.
<<>>=
u <- apply(U[,2:13],1,mean)
u[1:6]
@
\item
\code{apply()} carries out an operation (here, taking the mean) on rows or columns of matrices. We will learn more about it later.
\item 
The middle argument \code{1} to \code{apply()} asks for the function \code{mean()} to be applied to each row. 
\item
Setting \code{2} would give the average over rows for each column.
\item 
Mnemonic: \code{apply(U,1,...)} gives a vector of length \code{dim(U)[1]}, and \code{apply(U,2,...)} gives a vector of length \code{dim(U)[2]}.

\end{myitemize}
\end{frame}

\begin{frame}[fragile]
\frametitle{Checking the mnemonic for \code{apply(,1,)} and \code{apply(,2,)}}

\vspace{-1.5mm}

<<>>=
dim(U)
length(apply(U,1,mean))
length(apply(U,2,mean))
@

\myquestion. (a) How many rows are in the monthly unemployment matrix \code{U}? (b) How many columns does \code{U} have? (c) Which \code{apply()} function call takes the average across all the columns in each row of \code{U}?

\answer{\vspace{25mm}}{ (a) \Sexpr{nrow(U)} rows; (b) \Sexpr{ncol(U)} columns; (c) it should have an entry for each row, so its length matches the number of rows.}

\end{frame}


<<,echo=F,purl=F>>=
par(mai=c(0.6,0.6,0.2,0.2))
@

\begin{frame}[fragile]
\frametitle{Plotting the data}

\vspace{-5mm}

\begin{columns}[T] 
\begin{column}{0.45\textwidth}
<<fig_L,eval=F,echo=T>>=
plot(L$Year,y,type="line", 
  xlab="Year", 
  ylab="Life expectancy")
@


\vspace{-12mm}


<<fig_L_eval,out.width="60mm",fig.width=4,fig.height=3,echo=F>>=
<<fig_L>> 
@
\end{column}


\begin{column}{0.45\textwidth}
<<fig_U,eval=F,echo=T>>=
plot(U$Year,u,
  xlab="Year", 
  ylab="Unemployment")
@

\vspace{-12mm}

<<fig_U_eval,out.width="60mm",fig.width=4,fig.height=3,echo=F>>=
<<fig_U>> 
@
\end{column}
\end{columns}

\vspace{-1mm}

\begin{myitemize}
\item A basic rule of applied statistics is to plot the data.
\item Carefully designed plots can reveal secrets in the data: (i) label axes; (ii) lines or points or both; (iii) any other creative ideas? 
\item In this code, \code{U$Year} is equivalent to \code{U[,"Year"]} or \code{U[,1]}. 
\item In R, \code{$} extracts a component of a \myemph{list}. 
\item The list class can collect together objects of any other class.

%This course will use the basic \code{plot()} function. A powerful modern approach to graphics is the ``grammar of graphics'' in the \code{ggplot2} package, taught in STATS 306.
\end{myitemize}
\end{frame}

\begin{frame}[fragile]
\frametitle{Lists in R}
\begin{myitemize}

\vspace{-1mm}

\item Let's learn lists by example
<<>>=
my_list <- list(apples=c("red","green"),oranges=c(6,12))
class(my_list)
class(my_list$apples)
class(my_list$oranges)
@
\item We can also index components of a list using \code{[[.]]}
<<>>=
my_list[[1]] 
@

\vspace{-1mm}

\item A dataframe is actually a list of vectors. This lets each column have a different class, so we can store both qualitative and quantitative data.
\item Each column in a dataframe must have the same length, so R lets us index it like a matrix.

\end{myitemize}
\end{frame}

\begin{frame}[fragile]
\frametitle{Detrending life expectancy}
\begin{myitemize}
\item Life expectancy has been generally increasing with time. We say it has an \myemph{increasing trend}. 
\item We'll investigate if it is above or below trend during economic booms.
\item Subtracting an estimate of the trend from each data point is called \myemph{detrending}. A basic way to do this is to fit a linear trend that fits the data best, by finding the line mimizing the sum of squares of distances to the data.
\item In this course, we're going to study linear models and their statistical properties in considerable detail.
\item Let's first look at a \myemph{least squares} fitted line computed using the \code{lm()} function in R.
\end{myitemize}
\end{frame}

\begin{frame}[fragile]
\frametitle{Fitting a linear model using \code{lm()} using formula notation}

\vspace{-1.5mm}

\begin{myitemize}
\item The \code{lm()} function has a \myemph{formula notation} using a tilde (\code{~}).
<<lm>>=
L_fit <- lm(Total~Year,data=L)
@

\vspace{-1mm}

\item The formula \code{Total~Year} is read as {\it Total depends on Year}.
\item Writing \code{data=L} tells \code{lm()} to look for the linear model variables in the column names of the dataframe \code{L}. 
\item \code{lm(L$Total~L$Year)} and \code{lm(y=L$Total,x=L$Year)} are equivalent.
\end{myitemize}


\begin{columns}[T] 
\begin{column}{0.5\textwidth}
<<fig_L_code,eval=F,echo=T>>=
plot(Total~Year,data=L,
  type="l",
  ylab="Total life expectancy")
lines(L$Year,L_fit$fitted.values,
  lty="dotted")
@
\begin{myitemize}

\item We can use formula notation in \code{plot()} just like we did in \code{lm()}.
\end{myitemize}

\end{column}
\begin{column}{0.4\textwidth}

\vspace{-3mm}
<<fig_L_plot,echo=F,fig.width=3.5,fig.height=3.5>>=
par(mai=c(0.9,0.9,0.1,0.1))
<<fig_L_code>> 
@
\end{column}
\end{columns}

\end{frame}

\begin{frame}[fragile]
\frametitle{Exploring the output of \code{lm}}

\vspace{-1.5mm}

\begin{myitemize}
\item We call \code{L_fit} a \myemph{fitted model object} since it is an R object that was created by fitting a model, in this case a linear model fitted using \code{lm}.
\item
Let's check the class of this new R object 
<<>>=
class(L_fit)
@

\vspace{-1mm}

\item 
We see that \code{lm} is both the name of the function to fit a linear model and the class of the resulting fitted model object.
\item
Now, let's see what the fitted model object contains:
<<>>=
names(L_fit)
@

\vspace{-1mm}

\item \code{L_fit} is a \myemph{list} with all the things R thinks we might want to know about the fitted linear model. Thus, in the plot above, \code{L_fit$fitted.values} gives points on the fitted line. 

\end{myitemize}

\end{frame}

\begin{frame}[fragile]
\frametitle{Computer software notation vs math notation}

\vspace{-1.5mm}

\begin{myitemize}
\item Computers compute things. That's what they do. It seems obvious.
\item A computer function takes numbers in and spits numbers out. It can't know whether the analysis is correct, or reasonable, or useful for some purpose, or complete nonsense. Artificial intelligence is not (yet) good at applied statistics!
\item \myemph{For describing statistical assumptions, understanding the behavior of statistical tests, and defining statistical models, mathematics is a more appropriate language than computer code.}
% \item We have to learn to write about statistics using two different languages: mathematics and computing. 
\item If all is well, the math helps us understand the computing and vice versa.
\item We have seen one example: matrices and vectors are simultaneously\\
(i) mathematical objects, with certain mathematical rules and definitions;\\
(ii) R objects which follow a set of rules inspired by the mathematics.
\item How do we mathematically write down the statistical linear model that we fitted using \code{lm()}?
\end{myitemize}

\end{frame}


\begin{frame}[fragile]
\frametitle{A linear model -- the sample version}
\begin{myitemize}
\item Suppose our data are \m{y_1,y_2,\dots,y_n} and on each individual \m{i} we have \m{p} explanatory variables \m{x_{i1}, x_{i2},\dots,x_{ip}}. A linear model is
\end{myitemize}
\altdisplaymath{\LMi \hspace{10mm}
  y_i = b_1 x_{i1} + b_2 x_{i2} + \dots + b_p x_{ip} + e_i \quad\mbox{for $i=1,2,\dots,n$}
}
\begin{myitemize}
\item 
This is a model for a particular sample \m{y_1,\dots,y_n}. A basic task of statistics is to generalize from a sample to a population. We'll do that later.
\item 
The \myemph{residual error} terms \m{e_1,\dots,e_n} in equation \myref{\LMi} include everything about the data \m{y_1,y_2,\dots,y_n} that cannot be explained by a \myemph{linear combination} of the explanatory variables.
\item 
Using \myemph{summation notation} we can write the linear model for this sample in a more compact way,
\end{myitemize}

\vspace{-1mm}

\altdisplaymath{
\LMii \hspace{15mm}
  y_i = \sum_{j=1}^p x_{ij} b_j + e_i \hspace{10mm} \mbox{for $i=1,2,\dots,n$}
}

\vspace{-2mm}

\begin{myitemize}
\item We'll review summation notation in due course.
\end{myitemize}
\end{frame}

\begin{frame}[fragile]
\frametitle{Applying the linear model to detrend life expectancy}
\begin{myitemize}
\item When we did \code{L_fit <- lm(Total~Year,data=L)} earlier, we fitted the linear model \m{(\mathrm{LM1})} with \m{y_i} being the total life expectancy for the \m{i}th year in the dataset and \m{x_{i1}} being the corresponding year.
\item 
To fit a linear trend, we also want an \myemph{intercept}, which we can write by setting \m{x_{i2}=1} for each year \m{i}. 
\item 
In this special case, with \m{p=2} variables and \m{x_{i2}=1}, the model \m{(\mathrm{LM1})} is called the \myemph{simple linear regression} model,

\altdisplaymath{\SLRi \hspace{10mm}
  y_i = b_1 x_{i1} + b_2 + e_i \quad\mbox{for $i=1,2,\dots,n$}
}

\vspace{1mm}

\item Here, \m{b_2} is the intercept for the \myemph{fitted line}  \m{y_i = b_1 x_{i1} + b_2} when we ignore the residual errors \m{e_1,\dots,e_n}.
\item In \code{L_fit <- lm(Total~Year,data=L)}, we gave R the task of finding the values of the \myemph{coefficients} \m{b_1} and \m{b_2} which minimize the \myemph{sum of squared errors}, \m{\sum_{i=1}^n e_i^2}.
\item We didn't have to tell R we wanted an intercept. By default, it assumed we did. In this case it was right.
\end{myitemize}
\end{frame}

\begin{frame}[fragile]
\frametitle{Is unemployment rate assosciated with mortality?}
\begin{myitemize}
\item
Now, we'll fit another linear model to see if the detrended life expectancy can be explained by the level of economic activity, quantified by the unemployment rate.
\item We have seen that \code{residuals} is one of the components of an \code{lm} object, by looking at \code{names(L_fit)}. 
\item \myemph{Residual} is a more polite name than \myemph{residual error}. That is appropriate here, since the ``error'' \m{e_i} is exactly the deviation from trend that we are interested in. Interpretation of \m{e_i} depends on the particular situation.
\item First, let's set up the variables for the regression. Since we detrended life expectancy, we should also detrend unemployment. 
Then, we use \code{\%in\%} to find the years when these two datasets match and \code{subset()} to select these years from \code{L_detrended}.
\end{myitemize}
<<detrended_variables>>=
L_detrended <- L_fit$residuals
U_detrended <- lm(u~U$Year)$residuals
L_detrended <- subset(L_detrended,L$Year %in% U$Year)
@
\end{frame}

\begin{frame}[fragile]
\frametitle{A linear model linking mortality and unemployment}
<<detrended_lm>>= 
lm1 <- lm(L_detrended~U_detrended)
coef(lm1)
@
\begin{myitemize}
\item We have obtained a positive coefficient for the sample linear model. 
Higher unemployment seems to be associated with higher life expectancy.
This may be surprising. Is the result \myemph{statistically significant}? What happens if we use a different explanatory variable instead of unemployment? Or if we use more than one explanatory variable? Are there any violations of statistical assumptions that might invalidate this analysis? Is it reasonable to make a causal interpretation (that economic cycles cause fluctuations in life expectancy) or must we limit ourselves to a claim that these variables are associated?
\item 
Giving informed answers to statistical questions such as these is a primary goal of the course.
\end{myitemize}
\end{frame}


\end{document}

\begin{frame}[fragile]
\frametitle{}
\end{frame}


