# Load in the unemployment dataset
unemployment <- read.table("https://ionides.github.io/401f18/01/unemployment.csv", sep = ",", header = T)
install.packages('faraway')
install.packages('minqa')
install.packages('nloptr')
matrix(c(1,1,1,3,2,1,3,2,2), nrow=3)
solve(matrix(c(1,1,1,3,2,1,3,2,2), nrow=3))
Xnoint = matrix(c(87,86,73,65,90,100,70,76,76,90),nrow = 5)
Xnoint
y = c(90,65,69,79,85)
lm1 = lm(y ~ X)
data = matrix(c(87,86,73,65,90,100,70,76,76,90),nrow = 5)
data
X = cbind(data,rep(1,5))
X
y = c(90,65,69,79,85)
lm1 = lm(y ~ X)
lm1
summary(lm1)
y = c(90,65,69,79,85)
lm1 = lm(y ~ data)
summary(lm1)
y = c(90,65,69,79,85)
lmod1 = lm(y ~ data)
summary(lmod1)
df = cbind(y,data)
lmod2 = lm(y ~ ., df)
y = c(90,65,69,79,85)
lmod1 = lm(y ~ data)
summary(lmod1)
df = data.frame(y = y,data = data)
lmod2 = lm(y ~ ., df)
summary(lmod2)
df = data.frame(cbind(y,data))
lmod2 = lm(y ~ ., df)
summary(lmod2)
coef(summary(lmod2))
coefs(summary(lmod2))
coef(lmod2))
coef(lmod2)
coef(lmod1)
rm(list=ls())
source('C:/Users/James/Dropbox/Research/LOOP Pairs/pair_fns.R')
source('C:/Users/James/Dropbox/Research/LOOP Pairs/R/pair_sim_fns.R')
source('C:/Users/James/Dropbox/Research/LOOP Pairs/pair_fns.R')
source('C:/Users/James/Dropbox/Research/LOOP Pairs/R/pair_sim_fns.R')
source('C:/Users/James/Dropbox/Research/LOOP Pairs/R/pair_sim_fns.R')
source('C:/Users/James/Dropbox/Research/LOOP Pairs/R/Sim/Sim1.R')
source('C:/Users/James/Dropbox/Research/LOOP Pairs/R/Sim/Sim1.R')
source('C:/Users/James/Dropbox/Research/LOOP Pairs/R/Sim/Sim1.R')
results
source('C:/Users/James/Dropbox/Research/LOOP Pairs/R/Sim/Sim1.R')
N = 30
dat = data.frame(P = 1:N,
X = sample(0:3,N,replace = TRUE))
dat$Z1 = dat$X + sample(-1:1,N,replace=TRUE)
dat$Z2 = dat$X + sample(-1:1,N,replace=TRUE)
for(i in 1:N){
if(dat$Z1[i] < 0) {
dat$Z1[i] = 0
} else if(dat$Z1[i] > 3) {
dat$Z1[i] = 3
}
if(dat$Z2[i] < 0) {
dat$Z2[i] = 0
} else if(dat$Z2[i] > 3) {
dat$Z2[i] = 3
}
}
alph = 0
beta_Z = -2
beta_X = 4
sigma = 1
tau = 1
dat$c1 = alph + beta_Z * dat$Z1 + beta_X * dat$X + rnorm(N,0,sigma)
dat$c2 = alph + beta_Z * dat$Z2 + beta_X * dat$X + rnorm(N,0,sigma)
dat$t1 = dat$c1 + tau
dat$t2 = dat$c2 + tau
c = c(dat$c1,dat$c2)
t = c(dat$t1,dat$t2)
Z = as.matrix(c(dat$Z1,dat$Z2))
P = c(1:N,1:N)
Tr1 = rbinom(N,1,0.5)
Tr2 = ifelse(Tr1 == 1, 0, 1)
Tr = c(Tr1, Tr2)
Y = ifelse(Tr == 1, t, c)
Y
Tr
Z
P
pair(Y,Tr,Z,P)
Y[1]
Y[31]
Y[2]
Tr[2]
Y[32]
Y[29]
reorient(pair(Y,Tr,Z,P))
paired = pair(Y,Tr,Z,P)
paired
paired = pair(Y,Tr,Z,P)
data_a = reorient(paired)
data_a
source('C:/Users/James/Dropbox/Research/LOOP Pairs/R/Sim/Sim1.R')
source('C:/Users/James/Dropbox/Research/LOOP Pairs/pair_fns.R')
source('C:/Users/James/Dropbox/Research/LOOP Pairs/R/Sim/Sim1.R')
data_a$W = data_a$Y1 - data_a$Y2
data_a
data_a = reorient(paired)
data_b = data_a
data_b[4:5] = data_b[5:4]
data_a
data_b
data_a$W = data_b$W = data_a$Y1 - data_a$Y2
i = 1
rf_a = randomForest(W ~ ., data_a[-i,-c(1:3)])
rf_b = randomForest(W ~ ., data_b[-i,-c(1:3)])
predict(rf_a,data_a[i,])
a = predict(rf_a,data_a[i,])
b = predict(rf_b,data_b[i,])
a
b
rf_ab3 = function(assigned){
require(randomForest)
data_a = reorient(paired)
data_b = data_a
N = nrow(paired)
data_b[4:5] = data_b[5:4]
data_a$W = data_b$W = data_a$Y1 - data_a$Y2
d = rep(0,N)
for(i in 1:N){
rf_a = randomForest(W ~ ., data_a[-i,-c(1:3)])
rf_b = randomForest(W ~ ., data_b[-i,-c(1:3)])
a = predict(rf_a,data_a[i,])
b = predict(rf_b,data_b[i,])
d[i] = 0.5*(a-b)
}
return(d)
}
rf_ab3(assigned)
source('C:/Users/James/Dropbox/Research/LOOP Pairs/R/Sim/Sim1.R')
source('~/.active-rstudio-document')
source('C:/Users/James/Dropbox/Research/LOOP Pairs/R/Sim/Sim1.R')
source('C:/Users/James/Dropbox/Research/LOOP Pairs/R/Sim/Sim1.R')
data_a
data_b
data_a[i,]
data_a[1,]
data_b[1,]
data_b[10,]
data_b[30,]
data_a[30,]
assigned[i,]
assigned[30,]
source('~/.active-rstudio-document')
source('C:/Users/James/Dropbox/Research/LOOP Pairs/R/Sim/Sim1.R')
source('C:/Users/James/Dropbox/Research/LOOP Pairs/R/Sim/Sim1.R')
source('C:/Users/James/Dropbox/Research/LOOP Pairs/R/Sim/Sim1.R')
assigned = pair(Y,Tr,Z,P)
data_a = reorient(paired)
data_b = data_a
k = nrow(paired)
data_b[4:5] = data_b[5:4]
data_a$W = data_b$W = data_a$Y1 - data_a$Y2
d = rep(0,k)
predict(rf_a,assigned[i,])
i = 1
rf_a = randomForest(W ~ ., data_a[-i,-c(1:3)])
rf_b = randomForest(W ~ ., data_b[-i,-c(1:3)])
a = predict(rf_a,assigned[i,])
a
predict(rf_a,data_a[1,])
predict(rf_a,data_a[i,])
predict(rf_a,assigned[i,])
assigned[i,]
data_a[i,]
assigned
data_a = reorient(assigned)
data_b = data_a
k = nrow(assigned)
data_b[4:5] = data_b[5:4]
data_a$W = data_b$W = data_a$Y1 - data_a$Y2
d = rep(0,k)
rf_a = randomForest(W ~ ., data_a[-i,-c(1:3)])
rf_b = randomForest(W ~ ., data_b[-i,-c(1:3)])
a = predict(rf_a,assigned[i,])
b = predict(rf_b,assigned[i,])
predict(rf_a,assigned[i,])
predict(rf_a,data_a[i,])
source('~/.active-rstudio-document')
source('C:/Users/James/Dropbox/Research/LOOP Pairs/R/Sim/Sim1.R')
results
save(results, file = "C:/Users/James/Dropbox/Research/LOOP Pairs/R/Sim/res_sim1.RData")
source('C:/Users/James/Dropbox/Research/LOOP Pairs/R/pair_sim_fns.R')
source('C:/Users/James/Dropbox/Research/LOOP Pairs/pair_fns.R')
source('C:/Users/James/Dropbox/Research/LOOP Pairs/R/Sim/Sim1.R')
source('C:/Users/James/Dropbox/Research/LOOP Pairs/R/Sim/Sim1.R')
results
source('C:/Users/James/Dropbox/Research/LOOP Pairs/R/Sim/Sim1.R')
results
source('C:/Users/James/Dropbox/Research/LOOP Pairs/R/Sim/Sim1.R')
read.csv("https://ionides.github.io/401f18/01/unemployment.csv")
data = read.table("https://ionides.github.io/401f18/01/unemployment.csv")
data
data = read.table("https://ionides.github.io/401f18/01/unemployment.csv",sep = ",")
data
head(data)
data = read.table("https://ionides.github.io/401f18/01/unemployment.csv",sep = ",",header = T)
head(data)
data$Year
A = matrix(c(0,1,1,3,3,2),nrow = 3)
apply(A,1,mean)
apply(A,2,mean)
plastic = read.table(file.choose(),header = T)
plastic
plot(time,hardness)
plot(time ~ hardness, data = plastic)
plot(time ~ hardness, data = data.frame(plastic))
data=read.table(file.choose(),header = T)
data
runif
height = round(runif(20,60,72))
height
height = round(runif(30,58,76))
height
weight
weight = height*2 + 30 + rnorm(30,0,10)
weight
58*1.5+30
height = round(runif(30,58,76))
weight = height*1.5 + 30 + rnorm(30,0,10)
weight
weight = height*1.5 + 30 + rnorm(30,0,20)
weight
height
height = round(runif(30,58,76))
weight = height*1.5 + 40 + rnorm(30,0,20)
height
weight
plot(weight,height)
set.seed(401)
height = round(runif(30,58,76))
weight = height*1.5 + 40 + rnorm(30,0,20)
weight_lm = lm(weight ~ height)
plot(height,weight)
plot(height,weight)
abline(coef(weight_lm))
plot(height,weight)
abline(coef(weight_lm))
set.seed(401)
weight = height*1.5 + 40 + rnorm(100,0,20)
height = round(runif(100,58,76))
weight = height*1.5 + 40 + rnorm(100,0,20)
weight_lm = lm(weight ~ height)
plot(height,weight)
abline(coef(weight_lm))
plot(height,weight)
abline(coef(weight_lm))
set.seed(401)
height = round(runif(100,58,76))
weight = height*1.5 + 40 + rnorm(100,0,10)
weight_lm = lm(weight ~ height)
plot(height,weight)
abline(coef(weight_lm))
coef(weight_lm)
height[10]
round(coef(weight_lm),3)
install.packages('mat2tex')
library(mat2tex)
A = matrix(c(0,1,1,3,3,2),nrow = 3)
apply(A,2,mean)
install.packages('mat2tex')
