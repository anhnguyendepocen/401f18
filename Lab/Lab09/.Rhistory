# calculate the occurrence rates for upflow events
hour_graph$upflow <- (hour_graph$upflow.sum/hour_graph$count.sum)*100
hour_graph$upflow_lim[hour_graph$upflow.sum > threshold] <-
hour_graph$upflow[hour_graph$upflow.sum > threshold]
hour_graph_upflow <- hour_graph[, c("MLT_hour", "level", "upflow", "upflow_lim")]
colnames(hour_graph_upflow) <- c("MLT", "level", "upflow", "upflow_lim")
hour_graphl <- melt.data.frame(hour_graph_upflow, id = c("MLT", "level"))
hour_graphl$level <- factor(hour_graphl$level, levels = unique(hour_graphl$level))
ggplot(data = hour_graphl,
aes(x=MLT, y=value, group=level)) +
geom_line(data = subset(hour_graphl, hour_graphl$variable == "upflow_lim"),
aes(linetype=level), size = bold) +
geom_line(data = subset(hour_graphl, hour_graphl$variable == "upflow"),
aes(linetype=level), size = thin) +
scale_linetype_manual(values=c("solid", "dashed", "dotdash", "dotted")) +
labs(y = "Occurrence Rate", title = "Upflow Events \nby Time of Day",
linetype = "KP Level") + theme(text = element_text(size = text_size),
panel.background = element_rect(fill ="transparent"),
plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = c(3,9,15,21), colour = 'grey')
dev.copy(pdf, "Rpictures/exploratory/event_hour_kp_upflow.pdf")
dev.off()
# calculate the occurrence rates for downflow events
hour_graph$downflow <- (hour_graph$`abs(downflow).sum`/hour_graph$count.sum)*100
hour_graph$downflow_lim[hour_graph$`abs(downflow).sum` > threshold] <-
hour_graph$downflow[hour_graph$`abs(downflow).sum` > threshold]
hour_graph <- hour_graph[, c("MLT_hour", "level", "downflow", "downflow_lim")]
colnames(hour_graph) <- c("MLT", "level", "downflow", "downflow_lim")
hour_graphl <- melt.data.frame(hour_graph, id = c("MLT", "level"))
hour_graphl$level <- factor(hour_graphl$level, levels = unique(hour_graphl$level))
ggplot(data = hour_graphl,
aes(x=MLT, y=value, group=level)) +
geom_line(data = subset(hour_graphl, hour_graphl$variable == "downflow_lim"),
aes(linetype=level), size = bold) +
geom_line(data = subset(hour_graphl, hour_graphl$variable == "downflow"),
aes(linetype=level), size = thin) +
scale_linetype_manual(values=c("solid", "dashed", "dotdash", "dotted")) +
labs(y = "Occurrence Rate", title = "Downflow Events \nby Time of Day",
linetype = "KP Level") + theme(text = element_text(size = text_size),
panel.background = element_rect(fill ="transparent"),
plot.title = element_text(hjust = 0.5)) +
geom_vline(xintercept = c(3,9,15,21), colour = 'grey')
dev.copy(pdf, "Rpictures/exploratory/event_hour_kp_downflow.pdf")
dev.off()
##########################################################
# Create graphs of events based on different aspects
##########################################################
# Function for Making Graphs by predictor variable label
graph_function <- function(dataset, label, z, limit, ybreaks, x_tick_label,
xlab, ylab, plot_title){
model <- formula(paste("upflow + abs(downflow) + count ~ ", label))
graph_data <- summaryBy(model, data = dataset, FUN = sum)
graph_data <- na.omit(graph_data)
graph_data$upflow <- (graph_data$upflow.sum/graph_data$count.sum)*100
graph_data$downflow <- (graph_data$`abs(downflow).sum`/graph_data$count.sum)*100
check <- graph_data
# check assumptions for the large sample z confidence interval approximation
graph_data$np1 <- graph_data$count.sum*(graph_data$upflow/100)
graph_data$n1_p1 <- graph_data$count.sum*(1-(graph_data$upflow/100))
graph_data$np2 <- graph_data$count.sum*(graph_data$downflow/100)
graph_data$n1_p2 <- graph_data$count.sum*(1-(graph_data$downflow/100))
if(min(graph_data$np1) < 10 | min(graph_data$n1_p1) < 10 | min(graph_data$np2) < 10 |
min(graph_data$n1_p2) < 10){
print("sample too small")
} else{print("Assumptions Met")}
# melt dataframe to long form for the purposes of graphing
graph_data <- graph_data[, c(label, "count.sum", "upflow", "downflow")]
graph_datal <- melt.data.frame(graph_data, id = c(label, "count.sum"))
colnames(graph_datal) <- c(label, "count.sum", "Event", "value")
# define 95% confidence interval for upflow and downflow rates
graph_datal$se <- sqrt(graph_datal$value*(100 - graph_datal$value)/graph_datal$count.sum)
graph_datal$lower <- graph_datal$value - z*graph_datal$se
graph_datal$upper <- graph_datal$value + z*graph_datal$se
# graph the event occurrence rates with 95% confidence band
graph <- ggplot(data = graph_datal, aes_string(x = label, y = "value", color = "Event")) +
geom_line(aes(y = value), size = bold) + geom_line(aes(y = lower), size = thin) +
geom_line(aes(y = upper), size = thin) +
geom_ribbon(aes(ymin = lower, ymax = upper, fill = Event), alpha="0.5",
linetype = 0) +
scale_y_continuous(labels = comma, limits = c(0, limit), breaks = ybreaks) +
scale_x_continuous(breaks = unique(graph_datal[,label]),
labels = x_tick_label) +
labs(x = xlab, y = ylab, title = plot_title) +
theme(text = element_text(size = text_size),
axis.text.x=element_text(angle=-90, vjust = 0.75),
panel.background = element_rect(fill ="transparent"),
plot.title = element_text(hjust = 0.5))
return(list(check, graph))
}
# create labels
ion_events$ae_lab <- floor(ion_events$AE/100)*100
ion_events$ae_lab[ion_events$ae_lab >= 1100] = 1100
ion_events$kp_lab <- floor(ion_events$KP/0.5)*0.5
ion_events$kp_lab[ion_events$kp_lab >= 6.50] = 6.50
ion_events$SWV_labs <- floor(ion_events$SWV/50)*50
ion_events$SWV_labs[ion_events$SWV_labs < 250] = 250
ion_events$SWV_labs[ion_events$SWV_labs > 700] = 700
ion_events$SWPND_labs <- floor(ion_events$SWPND/2)*2
ion_events$SWPND_labs[ion_events$SWPND_labs > 26] = 26
ion_events$SWDP_labs <- floor(ion_events$SWDP)
ion_events$SWDP_labs[ion_events$SWDP_labs > 9] = 9
ion_events$Bx_labs <- floor(ion_events$Bx)
ion_events$Bx_labs[ion_events$Bx_labs < -8] = -8
ion_events$Bx_labs[ion_events$Bx_labs > 8] = 8
ion_events$By_labs <- floor(ion_events$By)
ion_events$By_labs[ion_events$By_labs < -8] = -8
ion_events$By_labs[ion_events$By_labs > 8] = 8
ion_events$Bz_labs <- floor(ion_events$Bz)
ion_events$Bz_labs[ion_events$Bz_labs < -8] = -8
ion_events$Bz_labs[ion_events$Bz_labs > 8] = 8
# split into daytime and nighttime datasets
ion_events_day <- subset(ion_events, ion_events$day_ind == "day")
ion_events_night <- subset(ion_events, ion_events$day_ind == "night")
# graph of upflow and downflow events by AE
# daytime or nighttime graph
limit = 35
ybreaks = seq(0, 35, 5)
x_tick_label <- c("0", "100", "200", "300", "400", "500", "600", "700",
"800", "900", "1000", ">1100")
graph <- graph_function(ion_events, "ae_lab", z, limit, ybreaks, x_tick_label, "AE",
"Occurrence Rate", "Events by AE")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_ae.pdf")
dev.off()
# daytime
graph <- graph_function(ion_events_day, "ae_lab", z, limit, ybreaks, x_tick_label,
"AE", "Occurrence Rate", "Events by AE, Daytime")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_ae_day.pdf")
dev.off()
# nighttime
graph <- graph_function(ion_events_night, "ae_lab", z, limit, ybreaks, x_tick_label,
"AE", "Occurrence Rate", "Events by AE, Nighttime")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_ae_night.pdf")
dev.off()
# graph of upflow and downflow events by KP
# daytime or nighttime
limit = 40
ybreaks = seq(0,40,5)
x_tick_label <- c("0.0", "0.5", "1.0", "1.5", "2.0", "2.5", "3.0", "3.5", "4.0", "4.5", "5.0",
"5.5", "6.0", ">6.5")
graph <- graph_function(ion_events, "kp_lab", z, limit, ybreaks, x_tick_label,
"KP", "Occurrence Rate", "Events by KP")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_kp.pdf")
dev.off()
# daytime
graph <- graph_function(ion_events_day, "kp_lab", z, limit, ybreaks, x_tick_label,
"KP", "Occurrence Rate", "Events by KP, Daytime")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_kp_day.pdf")
dev.off()
# nighttime
graph <- graph_function(ion_events_night, "kp_lab", z, limit, ybreaks, x_tick_label,
"KP", "Occurrence Rate", "Events by KP, Nighttime")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_kp_night.pdf")
dev.off()
# graph of events by SW values
# graphs of solar wind velocity confidence bands
limit = 25
ybreaks = seq(0,25,5)
x_tick_label <- c("<250", "300", "350", "400", "450", "500", "550", "600",
"650", ">700")
graph <- graph_function(ion_events, "SWV_labs", z, limit, ybreaks, x_tick_label,
"SWV", "Occurrence Rate", "Events by SWV")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_swv.pdf")
dev.off()
# daytime swv
graph <- graph_function(ion_events_day, "SWV_labs", z, limit, ybreaks, x_tick_label,
"SWV", "Occurrence Rate", "Events by SWV, Daytime")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_swv_day.pdf")
dev.off()
# nighttime swv
graph <- graph_function(ion_events_night, "SWV_labs", z, limit, ybreaks, x_tick_label,
"SWV", "Occurrence Rate", "Events by SWV, Nighttime")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_swv_night.pdf")
dev.off()
# graphs of solar wind proton number density confidence bands
limit = 20
ybreaks = seq(0,20,4)
x_tick_label <- c("0", "2", "4", "6", "8", "10", "12", "14", "16", "18",
"20", "22", "24", ">26")
graph <- graph_function(ion_events, "SWPND_labs", z, limit, ybreaks, x_tick_label,
"SWPND", "Occurrence Rate", "Events by SWPND")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_swpnd.pdf")
dev.off()
# daytime
graph <- graph_function(ion_events_day, "SWPND_labs", z, limit, ybreaks, x_tick_label,
"SWPND", "Occurrence Rate", "Events by SWPND, Daytime")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_swpnd_day.pdf")
dev.off()
# nighttime
graph <- graph_function(ion_events_night, "SWPND_labs", z, limit, ybreaks, x_tick_label,
"SWPND", "Occurrence Rate", "Events by SWPND, Nighttime")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_swpnd_night.pdf")
dev.off()
# graphs of solar wind dynamic pressure confidence bands
limit = 30
ybreaks = seq(0,30,5)
x_tick_label = c("0", "1", "2", "3", "4", "5", "6", "7", "8", ">9")
graph <- graph_function(ion_events, "SWDP_labs", z, limit, ybreaks, x_tick_label,
"SWDP", "Occurrence Rate", "Events by SWDP")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_swdp.pdf")
dev.off()
# daytime
graph <- graph_function(ion_events_day, "SWDP_labs", z, limit, ybreaks, x_tick_label,
"SWDP", "Occurrence Rate", "Events by SWDP, Daytime")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_swdp_day.pdf")
dev.off()
# nighttime
graph <- graph_function(ion_events_night, "SWDP_labs", z, limit, ybreaks, x_tick_label,
"SWDP", "Occurrence Rate", "Events by SWDP, Nighttime")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_swdp_night.pdf")
dev.off()
# graphs of events by IMF components
# Bx
limit = 25
ybreaks = seq(0, 25, 5)
x_tick_label = c("<-8", "-7", "-6", "-5", "-4", "-3", "-2", "-1", "0",
"1", "2", "3", "4", "5", "6", "7", ">8")
graph <- graph_function(ion_events, "Bx_labs", z, limit, ybreaks, x_tick_label,
"Bx", "Occurrence Rate", "Events by Bx")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_IMF_Bx.pdf")
dev.off()
# daytime
graph <- graph_function(ion_events_day, "Bx_labs", z, limit, ybreaks, x_tick_label,
"Bx", "Occurrence Rate", "Events by Bx, Daytime")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_IMF_Bx_day.pdf")
dev.off()
# nighttime
graph <- graph_function(ion_events_night, "Bx_labs", z, limit, ybreaks, x_tick_label,
"Bx", "Occurrence Rate", "Events by Bx, Nighttime")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_IMF_Bx_night.pdf")
dev.off()
# By
limit = 25
ybreaks = seq(0, 25, 5)
graph <- graph_function(ion_events, "By_labs", z, limit, ybreaks, x_tick_label,
"By", "Occurrence Rate", "Events by By")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_IMF_By.pdf")
dev.off()
# daytime
graph <- graph_function(ion_events_day, "By_labs", z, limit, ybreaks, x_tick_label,
"By", "Occurrence Rate", "Events by By, Daytime")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_IMF_By_day.pdf")
dev.off()
# nighttime
graph <- graph_function(ion_events_night, "By_labs", z, limit, ybreaks, x_tick_label,
"By", "Occurrence Rate", "Events by By, Nighttime")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_IMF_By_night.pdf")
dev.off()
# Bz
limit = 25
ybreaks = seq(0, 25, 5)
graph <- graph_function(ion_events, "Bz_labs", z, limit, ybreaks, x_tick_label,
"Bz", "Occurrence Rate", "Events by Bz")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_IMF_Bz.pdf")
dev.off()
# daytime
graph <- graph_function(ion_events_day, "Bz_labs", z, limit, ybreaks, x_tick_label,
"Bz", "Occurrence Rate", "Events by Bz, Daytime")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_IMF_Bz_day.pdf")
dev.off()
# nighttime
graph <- graph_function(ion_events_night, "Bz_labs", z, limit, ybreaks, x_tick_label,
"Bz", "Occurrence Rate", "Events by Bz, Nighttime")
graph[[2]]
dev.copy(pdf, "Rpictures/exploratory/event_IMF_Bz_night.pdf")
dev.off()
##############################################################
# Save dataset for future use
##############################################################
save(ion_events, file = "Data/Intermediate/ion_events_processed.Rdata")
##############################################################
# END
##############################################################
# simulate rolling a die 100 times
die_roll <- function(x){
r <- runif(x, min = 0, max = 6)
value <- floor(r) + 1
return(value)
}
die_rolls <- replicate(100, die_roll(1))
# alternative (simpler) solution
sides <- c(1:6)
sample(sides, 100)
# simulate rolling a die 100 times
die_roll <- function(x){
r <- runif(x, min = 0, max = 6)
value <- floor(r) + 1
return(value)
}
die_rolls <- replicate(100, die_roll(1))
# alternative (simpler) solution
sides <- c(1:6)
sample(sides, 100, replace = TRUE)
# simulate rolling a die 100 times
die_roll <- function(x){
r <- runif(x, min = 0, max = 6)
value <- floor(r) + 1
return(value)
}
die_rolls <- replicate(100, die_roll(1))
# alternative (simpler) solution
sides <- c(1:6)
die_rolls2 <- sample(sides, 100, replace = TRUE)
die_rolls2 <- data.frame(die_rolls2)
View(die_rolls2)
apply(die_rolls2, 2, sum)
die_rolls2 <- data.frame(die_rolls2)
die_rolls2$count = 1
apply(die_rolls2, 2, sum)
table(die_rolls2)
# simulate rolling a die 100 times
die_roll <- function(x){
r <- runif(x, min = 0, max = 6)
value <- floor(r) + 1
return(value)
}
die_rolls <- replicate(100, die_roll(1))
# alternative (simpler) solution
sides <- c(1:6)
die_rolls2 <- sample(sides, 100, replace = TRUE)
table(die_rolls2)
# bring in the raw data
#bottle <- data.table::fread('bottle.csv', header = T,
#                            stringsAsFactors = FALSE, select = c(1:8))
# use Depth_ID to obtain year information
#bottle$century <- substr(bottle$Depth_ID, 1,2)
#bottle$year <- substr(bottle$Depth_ID, 4, 5)
#bottle$Year <- paste(bottle$century, bottle$year, sep = "")
# Keep only one year of the data
#bottle_2016 <- subset(bottle, bottle$Year == "2016")
#bottle_2016 <- bottle_2016[, c(-1:-4, -9:-10)]
# write to a file for the students
#write.csv(bottle_2016, 'bottle_2016.csv')
bottle_2016 <- read.csv('bottle_2016.csv', header = TRUE)
bottle_2016 <- read.csv('bottle_2016.csv', header = T)
lm1 <- lm(T_degC ~ Depthm + Salnty + O2ml_L,
data = bottle_2016)
summary(lm1)$coefficients[, c("Estimate", "Std. Error")]
# confidence interval for B3 (relationship between oxygen)
z_star <- qnorm(0.975)
pred <- summary(lm1)$coefficients["O2ml_L", c("Estimate")]
SE <- summary(lm1)$coefficients["O2ml_L", c("Std. Error")]
cat("CI = [", round(pred-z_star*SE,3),
", ", round(pred+z_star*SE,3), "]", sep = "")
# weighted coin
# coin tosses
coin_toss <- function(x){
r <- runif(x, min = 0, max = 3)
value <- ceiling(r)
if(value > 1) {value = 2}
return(value)
}
coin_tosses <- replicate(100, coin_toss(1))
# get the count of rolls for each value
coin_prop <- aggregate(data.frame(count = coin_tosses),
list(value = coin_tosses), FUN = length)
# calculate our test statistic
coin_prop$exp <- 100*(1/3)
coin_prop$exp[coin_prop$value == 2] = 100*(2/3)
chi_sqr <- sum((coin_prop$count - coin_prop$exp)^2/sum(coin_prop$exp))
# calculate our p-value
# chi-squared has 1 degrees of freedom
1 - pchisq(chi_sqr, 1)
# read in the crime dataset
crime <- read.delim("crime.txt", comment.char = "#")
# Ha: B1 (pct_25_hs_grad) not equal to 0
# fit the model
lm1 <- lm(total_crime_count ~ ., data = crime)
summary(lm1)$coefficients[, c("Estimate", "Std. Error")]
# conduct the hypothesis test
2*pnorm(summary(lm1)$coefficients["pct_25_hs_grad", "Estimate"],
mean = 0,
sd = summary(lm1)$coefficients["pct_25_hs_grad", "Std. Error"])
pt(0.005)
summary(lm1)
# from the summary results of the linear model fit above, we know that we have 44 degrees of freedom
t_star <- pt(0.005, 44)
# from the summary results of the linear model fit above, we know that we have 44 degrees of freedom
t_star <- pt(0.005, 44)
pred <- summary(lm1)$coefficients["pct_25_hs_grad", c("Estimate")]
SE <- summary(lm1)$coefficients["pct_25_hs_grad", c("Std. Error")]
cat("CI = [", round(pred-t_star*SE,3),
", ", round(pred+t_star*SE,3), "]", sep = "")
# from the summary results of the linear model fit above, we know that we have 44 degrees of freedom
t_star <- pt(0.995, 44)
t_star
# from the summary results of the linear model fit above, we know that we have 44 degrees of freedom
t_star <- qt(0.995, 44)
t_star
# from the summary results of the linear model fit above, we know that we have 44 degrees of freedom
t_star <- qt(0.995, 44)
pred <- summary(lm1)$coefficients["pct_25_hs_grad", c("Estimate")]
SE <- summary(lm1)$coefficients["pct_25_hs_grad", c("Std. Error")]
cat("CI = [", round(pred-t_star*SE,3),
", ", round(pred+t_star*SE,3), "]", sep = "")
bottle_2016 <- read.csv('bottle_2016.csv', header = T)
lm1 <- lm(T_degC ~ Depthm + Salnty + O2ml_L,
data = bottle_2016)
summary(lm1)$coefficients[, c("Estimate", "Std. Error")]
# confidence interval for B3 (relationship between oxygen)
z_star <- qnorm(0.975)
pred <- summary(lm1)$coefficients["O2ml_L", c("Estimate")]
SE <- summary(lm1)$coefficients["O2ml_L", c("Std. Error")]
cat("CI = [", round(pred-z_star*SE,3),
", ", round(pred+z_star*SE,3), "]", sep = "")
# read in the crime dataset
crime <- read.delim("crime.txt", comment.char = "#")
# Ha: B1 (pct_25_hs_grad) not equal to 0
# fit the model
lm1 <- lm(total_crime_count ~ ., data = crime)
summary(lm1)$coefficients[, c("Estimate", "Std. Error")]
# conduct the hypothesis test
2*pnorm(summary(lm1)$coefficients["pct_25_hs_grad", "Estimate"],
mean = 0,
sd = summary(lm1)$coefficients["pct_25_hs_grad", "Std. Error"])
# confidence interval and prediction interval for new value
# new value
x_star <- c(1, 38, 50, 19, 15, 12)
pred <- x_star %*%coef(lm1)
V <- summary(lm1)$cov.unscaled
s <- summary(lm1)$sigma
SE <- s*sqrt(x_star%*%V%*%x_star)
c <- qnorm(0.975)
# confidence interval
cat("CI = [", round(pred-c*SE,3),
", ", round(pred+c*SE,3), "]", sep = "")
# prediction interval
SE_pred <- s*sqrt(1 + x_star%*%V%*%x_star)
cat("PI = [", round(pred-c*SE_pred,3),
", ", round(pred+c*SE_pred,3), "]", sep = "")
# simulate rolling a weighted die
# simulate rolling a die 100 times
die_roll <- function(x){
r <- runif(x, min = 0, max = 7)
value <- ceiling(r)
if(value > 5) {value = 6}
return(value)
}
die_rolls <- replicate(100, die_roll(1))
# simpler solution
sides <- c(1:6)
die_rolls2 <- sample(100, sides, replace = TRUE)
# get the count of rolls for each value
die_prop <- aggregate(data.frame(count = die_rolls),
list(value = die_rolls), FUN = length)
# calculate our test statistic
die_prop$exp <- 100*(1/7)
die_prop$exp[die_prop$value == 6] = 100*(2/7)
chi_sqr <- sum((die_prop$count - die_prop$exp)^2/sum(die_rolls$exp))
# calculate our p-value
# chi-squared has 5 degrees of freedom
1 - pchisq(chi_sqr, 5)
# get the count of rolls for each value
die_prop <- aggregate(data.frame(count = die_rolls),
list(value = die_rolls), FUN = length)
# calculate our test statistic
die_prop$exp <- 100*(1/7)
die_prop$exp[die_prop$value == 6] = 100*(2/7)
chi_sqr <- sum((die_prop$count - die_prop$exp)^2/sum(die_rolls$exp))
View(die_prop)
die_prop$count
chi_sqr <- sum((die_prop$count - die_prop$exp)^2/sum(die_prop$exp))
# calculate our p-value
# chi-squared has 5 degrees of freedom
1 - pchisq(chi_sqr, 5)
# weighted coin
# coin tosses
coin_toss <- function(x){
r <- runif(x, min = 0, max = 3)
value <- ceiling(r)
if(value > 1) {value = 2}
return(value)
}
coin_tosses <- replicate(100, coin_toss(1))
# get the count of rolls for each value
coin_prop <- aggregate(data.frame(count = coin_tosses),
list(value = coin_tosses), FUN = length)
# calculate our test statistic
coin_prop$exp <- 100*(1/3)
coin_prop$exp[coin_prop$value == 2] = 100*(2/3)
chi_sqr <- sum((coin_prop$count - coin_prop$exp)^2/sum(coin_prop$exp))
# calculate our p-value
# chi-squared has 1 degrees of freedom
1 - pchisq(chi_sqr, 1)
# from the summary results of the linear model fit above, we know that we have 44 degrees of freedom
t_star <- qt(0.995, 44)
pred <- summary(lm1)$coefficients["pct_25_hs_grad", c("Estimate")]
SE <- summary(lm1)$coefficients["pct_25_hs_grad", c("Std. Error")]
cat("CI = [", round(pred-t_star*SE,3),
", ", round(pred+t_star*SE,3), "]", sep = "")
